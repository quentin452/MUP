buildscript {
    repositories {
        jcenter()
        maven { 
            name = 'forge'
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id 'java'
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

version = "1.3.9"
group = "org.gr1m.mc" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mup"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

reobf {
    jar {
        extraFiles 'extraSrg.srg'
    }
}

mixin {
    extraSrgFile("searge", file('extraSrg.srg'))
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180814"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace '@FINGERPRINT@', project.findProperty('signSHA1')
    replace '@VERSION@', project.version

    def args = [
            "-Dfml.coreMods.load=org.gr1m.mc.mup.core.MupCore",
            "-Dmixin.hotSwap=true",
            "-Dmixin.checks.interfaces=true",
            "-Dmixin.debug.export=true",
            "-Dmixin.debug.verbose=true",
            "-Dmixin.debug.countInjections=true"
    ]
    clientJvmArgs.addAll(args)
    serverJvmArgs.addAll(args)
}

sourceSets.main.refMap = "mixins.mup.refmap.json"

repositories {
    maven { url = "http://repo.spongepowered.org/maven" }
    ivy {
        //url "https://google.com/404"
        //ivyPattern("https://google.com/404") // Workaround for https://github.com/gradle/gradle/issues/4107
        artifactPattern("modcompatlibs/[revision].[ext]")
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)

    shade
    compile.extendsFrom shade
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    //embed("org.spongepowered:mixin:0.7.8-SNAPSHOT") { transitive = false }
    shade('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: "asm-commons"
        exclude module: "asm-tree"
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "log4j-core"
        exclude module: "gson"
        exclude module: "commons-io"
    }
    
    compile 'org.jetbrains.java.decompiler:fernflower:sponge-SNAPSHOT'
    
    //compile '2476:145:Redstone+++ver1.2d-deobf@jar'
    //compile '2576:949:Redstone+++ver1.3+BETA-2-deobf@jar'
    //compile '2757:379:astralsorcery-1.12.2-1.10.20-deobf@jar'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/*
processResources.doLast {
    copy {
        from("$projectDir/src/main/resources") {
            include 'mcmod.info'

            // replace version and mcversion
            expand 'version':project.version, 'mcversion':project.minecraft.version
        }

        into("$projectDir/build/classes/java/main")
    }

    copy {
        from("$projectDir/src/main/resources") {
            exclude 'mcmod.info'
        }

        into("$projectDir/build/classes/java/main")
    }
}
*/

jar {
    manifest.attributes(
            'FMLCorePlugin': 'org.gr1m.mc.mup.core.MupCore',
            'FMLCorePluginContainsFMLMod': 'org.gr1m.mc.mup.Mup',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'ForceLoadAsMod': 'true',
            'TweakOrder': 0
    )
    
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
        from(project.zipTree(dep)){
            include 'META-INF/services', 'META-INF/services/**'
        }
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran. 
build.dependsOn signJar